use std::collections::HashMap;

pub type PreprocessedBoard = (u32, u32);

pub fn get_lookup() -> HashMap<PreprocessedBoard, f64> {
    let mut map = HashMap::new();

    map.insert((0, 4), 3474.7092823138705);
    map.insert((0, 5), 3412.5913326647583);
    map.insert((0, 6), 3337.983931609623);
    map.insert((0, 7), 2940.2477418809203);
    map.insert((0, 8), 2293.6483329581906);
    map.insert((0, 9), 2014.6758521679822);
    map.insert((0, 10), 977.2316966725509);
    map.insert((0, 11), 812.542377965729);
    map.insert((1, 4), 3486.3675895885494);
    map.insert((1, 5), 3447.4217976296354);
    map.insert((1, 6), 3400.368838582695);
    map.insert((1, 7), 3156.478099074216);
    map.insert((1, 8), 2537.1199571009006);
    map.insert((1, 9), 2194.198604654172);
    map.insert((1, 10), 1077.0438845752778);
    map.insert((1, 11), 997.2840284321461);
    map.insert((2, 4), 3491.4259446771957);
    map.insert((2, 5), 3462.591824239093);
    map.insert((2, 6), 3438.550893618918);
    map.insert((2, 7), 3304.803306203999);
    map.insert((2, 8), 2806.572840198802);
    map.insert((2, 9), 2413.9945175300095);
    map.insert((2, 10), 1220.6965582255584);
    map.insert((2, 11), 1252.9869052896977);
    map.insert((3, 4), 3491.6003953127242);
    map.insert((3, 5), 3465.8083381568817);
    map.insert((3, 6), 3446.5870786776545);
    map.insert((3, 7), 3351.2224813857642);
    map.insert((3, 8), 2910.6027580708187);
    map.insert((3, 9), 2542.4059382182136);
    map.insert((3, 10), 1309.889384525475);
    map.insert((3, 11), 1394.213418510374);
    map.insert((4, 4), 3495.7374111264417);
    map.insert((4, 5), 3465.715987271385);
    map.insert((4, 6), 3446.640025545502);
    map.insert((4, 7), 3360.459848231826);
    map.insert((4, 8), 2959.533275408083);
    map.insert((4, 9), 2620.2564420319677);
    map.insert((4, 10), 1365.3597279252126);
    map.insert((4, 11), 1488.433171460042);
    map.insert((5, 3), 3515.9244063076935);
    map.insert((5, 4), 3499.6748404757195);
    map.insert((5, 5), 3464.290208762561);
    map.insert((5, 6), 3446.7901293864443);
    map.insert((5, 7), 3363.3829954594607);
    map.insert((5, 8), 2991.8909923265824);
    map.insert((5, 9), 2670.7690481228205);
    map.insert((5, 10), 1393.7710964329938);
    map.insert((5, 11), 1557.7043997070116);
    map.insert((6, 3), 3519.680762999);
    map.insert((6, 4), 3503.889798312118);
    map.insert((6, 5), 3461.825002897741);
    map.insert((6, 6), 3446.628876239868);
    map.insert((6, 7), 3365.7277645331565);
    map.insert((6, 8), 3020.843480498219);
    map.insert((6, 9), 2700.631747581778);
    map.insert((6, 10), 1405.6261330994876);
    map.insert((6, 11), 1604.577294939606);
    map.insert((7, 3), 3520.8146802097854);
    map.insert((7, 4), 3514.4706341738047);
    map.insert((7, 5), 3460.5908755177074);
    map.insert((7, 6), 3446.493999711434);
    map.insert((7, 7), 3366.5112493339334);
    map.insert((7, 8), 3046.0355536492507);
    map.insert((7, 9), 2717.640777239513);
    map.insert((7, 10), 1411.2009265215163);
    map.insert((7, 11), 1635.022794696162);
    map.insert((8, 3), 3527.025627920265);
    map.insert((8, 4), 3518.929668236819);
    map.insert((8, 5), 3458.526834514115);
    map.insert((8, 6), 3447.6359923983223);
    map.insert((8, 7), 3370.407246278556);
    map.insert((8, 8), 3062.539596350851);
    map.insert((8, 9), 2735.538049256423);
    map.insert((8, 10), 1415.3874643178826);
    map.insert((8, 11), 1652.7705301982414);
    map.insert((9, 2), 3479.91);
    map.insert((9, 3), 3542.4967920927697);
    map.insert((9, 4), 3522.500322968573);
    map.insert((9, 5), 3454.3149326021535);
    map.insert((9, 6), 3447.3299904182127);
    map.insert((9, 7), 3371.812680314196);
    map.insert((9, 8), 3071.7800999729407);
    map.insert((9, 9), 2741.357400462283);
    map.insert((9, 10), 1420.742487921633);
    map.insert((9, 11), 1660.8164329621898);
    map.insert((10, 2), 3629.4211771440423);
    map.insert((10, 3), 3592.9410068231696);
    map.insert((10, 4), 3527.873569827979);
    map.insert((10, 5), 3451.94710673755);
    map.insert((10, 6), 3428.8839661768743);
    map.insert((10, 7), 3362.663069598617);
    map.insert((10, 8), 3317.855878148938);
    map.insert((10, 9), 2984.9537797215535);
    map.insert((10, 10), 1423.5129871014744);
    map.insert((10, 11), 1664.893928223365);
    map.insert((11, 1), 3532.38);
    map.insert((11, 2), 3644.339726636031);
    map.insert((11, 3), 3623.6474772043134);
    map.insert((11, 4), 3530.737718899691);
    map.insert((11, 5), 3447.2210267493056);
    map.insert((11, 6), 3429.6606959637597);
    map.insert((11, 7), 3541.35);
    map.insert((11, 8), 3346.18);
    map.insert((11, 9), 3483.2657197097906);
    map.insert((11, 11), 1732.7864597102262);
    map.insert((12, 1), 3662.127831515061);
    map.insert((12, 2), 3655.877359708501);
    map.insert((12, 3), 3643.7707732033837);
    map.insert((12, 4), 3534.8269950887357);
    map.insert((12, 5), 3446.62173662641);
    map.insert((12, 6), 3469.54);
    map.insert((13, 1), 3665.5701381141007);
    map.insert((13, 2), 3663.279247085018);
    map.insert((13, 3), 3658.5319156975465);
    map.insert((13, 4), 3659.2831858977447);
    map.insert((14, 1), 3657.3747790106486);
    map.insert((14, 2), 3658.936154657543);
    map.insert((14, 3), 3597.68);
    map.insert((15, 1), 3655.640370164062);
    map.insert((15, 2), 3553.5500000000006);

    map
}

pub fn heuristic(preprocessed_board: PreprocessedBoard) -> f64 {
    let (empty_count, max_cell) = preprocessed_board;

    // TODO: stop creating the hashmap every single time
    let lookup = get_lookup();
    let pre_lookup = lookup.get(&preprocessed_board);

    let empty_count_lookup = [
        15.82, 35.14, 752.49, 633.58, 1909.69, 3259.14, 3320.45, 3356.29, 3388.47, 3388.15,
        3446.54, 3541.35, 4071.11, 4961.21, 7341.16, 9085.73,
    ]
    .get(empty_count as usize);

    pre_lookup
        .or(empty_count_lookup)
        .cloned()
        .unwrap_or(2_usize.pow(empty_count + 1) as f64);

    if max_cell < 11 {
        1.0
    } else {
        200.0
    }
}
